// ------------------------------------------------------------------------------
//  Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

// **NOTE** This file was generated by a tool and any changes will be overwritten.

// Template Source: Templates\CSharp\Model\EntityType.cs.tt

namespace Microsoft.Graph
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.Serialization;
    using Newtonsoft.Json;

    /// <summary>
    /// The type Ti Indicator.
    /// </summary>
    [JsonObject(MemberSerialization = MemberSerialization.OptIn)]
    public partial class TiIndicator : Entity
    {
    
        /// <summary>
        /// Gets or sets activity group names.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "activityGroupNames", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<string> ActivityGroupNames { get; set; }
    
        /// <summary>
        /// Gets or sets azure tenant id.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "azureTenantId", Required = Newtonsoft.Json.Required.Default)]
        public string AzureTenantId { get; set; }
    
        /// <summary>
        /// Gets or sets certificate observable.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "certificateObservable", Required = Newtonsoft.Json.Required.Default)]
        public CertificateObservable CertificateObservable { get; set; }
    
        /// <summary>
        /// Gets or sets confidence.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "confidence", Required = Newtonsoft.Json.Required.Default)]
        public Int32? Confidence { get; set; }
    
        /// <summary>
        /// Gets or sets description.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "description", Required = Newtonsoft.Json.Required.Default)]
        public string Description { get; set; }
    
        /// <summary>
        /// Gets or sets detection product.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "detectionProduct", Required = Newtonsoft.Json.Required.Default)]
        public string DetectionProduct { get; set; }
    
        /// <summary>
        /// Gets or sets detection signature id.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "detectionSignatureId", Required = Newtonsoft.Json.Required.Default)]
        public string DetectionSignatureId { get; set; }
    
        /// <summary>
        /// Gets or sets detection signature name.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "detectionSignatureName", Required = Newtonsoft.Json.Required.Default)]
        public string DetectionSignatureName { get; set; }
    
        /// <summary>
        /// Gets or sets detection vendor.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "detectionVendor", Required = Newtonsoft.Json.Required.Default)]
        public string DetectionVendor { get; set; }
    
        /// <summary>
        /// Gets or sets diamond model.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "diamondModel", Required = Newtonsoft.Json.Required.Default)]
        public DiamondModel? DiamondModel { get; set; }
    
        /// <summary>
        /// Gets or sets email observable.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "emailObservable", Required = Newtonsoft.Json.Required.Default)]
        public EmailObservable EmailObservable { get; set; }
    
        /// <summary>
        /// Gets or sets expiration date time.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "expirationDateTime", Required = Newtonsoft.Json.Required.Default)]
        public DateTimeOffset? ExpirationDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets external id.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "externalId", Required = Newtonsoft.Json.Required.Default)]
        public string ExternalId { get; set; }
    
        /// <summary>
        /// Gets or sets file observable.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "fileObservable", Required = Newtonsoft.Json.Required.Default)]
        public FileObservable FileObservable { get; set; }
    
        /// <summary>
        /// Gets or sets first reported date time.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "firstReportedDateTime", Required = Newtonsoft.Json.Required.Default)]
        public DateTimeOffset? FirstReportedDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets host observable.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "hostObservable", Required = Newtonsoft.Json.Required.Default)]
        public HostObservable HostObservable { get; set; }
    
        /// <summary>
        /// Gets or sets identity observable.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "identityObservable", Required = Newtonsoft.Json.Required.Default)]
        public IdentityObservable IdentityObservable { get; set; }
    
        /// <summary>
        /// Gets or sets ingested date time.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "ingestedDateTime", Required = Newtonsoft.Json.Required.Default)]
        public DateTimeOffset? IngestedDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets is active.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "isActive", Required = Newtonsoft.Json.Required.Default)]
        public bool? IsActive { get; set; }
    
        /// <summary>
        /// Gets or sets kill chain.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "killChain", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<string> KillChain { get; set; }
    
        /// <summary>
        /// Gets or sets known false positives.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "knownFalsePositives", Required = Newtonsoft.Json.Required.Default)]
        public string KnownFalsePositives { get; set; }
    
        /// <summary>
        /// Gets or sets last modified date time.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "lastModifiedDateTime", Required = Newtonsoft.Json.Required.Default)]
        public DateTimeOffset? LastModifiedDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets last reported date time.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "lastReportedDateTime", Required = Newtonsoft.Json.Required.Default)]
        public DateTimeOffset? LastReportedDateTime { get; set; }
    
        /// <summary>
        /// Gets or sets malware family names.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "malwareFamilyNames", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<string> MalwareFamilyNames { get; set; }
    
        /// <summary>
        /// Gets or sets network observable.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "networkObservable", Required = Newtonsoft.Json.Required.Default)]
        public NetworkObservable NetworkObservable { get; set; }
    
        /// <summary>
        /// Gets or sets passive only.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "passiveOnly", Required = Newtonsoft.Json.Required.Default)]
        public bool? PassiveOnly { get; set; }
    
        /// <summary>
        /// Gets or sets severity.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "severity", Required = Newtonsoft.Json.Required.Default)]
        public string Severity { get; set; }
    
        /// <summary>
        /// Gets or sets tags.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "tags", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<string> Tags { get; set; }
    
        /// <summary>
        /// Gets or sets threat type.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "threatType", Required = Newtonsoft.Json.Required.Default)]
        public ThreatType? ThreatType { get; set; }
    
        /// <summary>
        /// Gets or sets tlp level.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "tlpLevel", Required = Newtonsoft.Json.Required.Default)]
        public TlpLevel? TlpLevel { get; set; }
    
        /// <summary>
        /// Gets or sets vendor information.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "vendorInformation", Required = Newtonsoft.Json.Required.Default)]
        public SecurityVendorInformation VendorInformation { get; set; }
    
        /// <summary>
        /// Gets or sets vulnerability states.
        /// </summary>
        [JsonProperty(NullValueHandling = NullValueHandling.Ignore, PropertyName = "vulnerabilityStates", Required = Newtonsoft.Json.Required.Default)]
        public IEnumerable<VulnerabilityState> VulnerabilityStates { get; set; }
    
    }
}

